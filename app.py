# -*- coding: utf-8 -*-
# """vadant.ipynb

# Automatically generated by Colab.

# Original file is located at
#     https://colab.research.google.com/drive/1ni5_mg3tJ7yKbvmMu7MKNs8kQkk_v85Q
# """

# !pip install flask-ngrok
# !pip install pyngrok==4.1.1

import pandas as pd
import numpy as np
df=pd.read_csv("Nagpur.csv")
df.dropna(subset=['Latitude'], inplace=True)

from sklearn.cluster import KMeans

import matplotlib.pyplot as plt

coords = df[['Longitude','Latitude']]

distortions = []
K = range(1,25)
for k in K:
    kmeansModel = KMeans(n_clusters=k)
    kmeansModel = kmeansModel.fit(coords)
    distortions.append(kmeansModel.inertia_)

# Calculate the derivative of distortions
d_distortions = np.diff(distortions)

# Find the elbow point where the rate of change starts to slow
elbow_point = np.where(d_distortions == d_distortions.min())[0][0] + 1

# print(f'The optimal number of clusters is {elbow_point}')

# fig, ax = plt.subplots(figsize=(12, 8))
# plt.plot(K, distortions, marker='o')
# plt.xlabel('k')
# plt.ylabel('Distortions')
# plt.title('Elbow Method For Optimal k')
# plt.show()

from sklearn.metrics import silhouette_score

sil = []
kmax = 50

# dissimilarity would not be defined for a single cluster, thus, minimum number of clusters should be 2
for k in range(2, kmax+1):
  kmeans = KMeans(n_clusters = k).fit(coords)
  labels = kmeans.labels_
  sil.append(silhouette_score(coords, labels, metric = 'euclidean'))
sil

kmeans = KMeans(n_clusters=len(sil), init='k-means++')
kmeans.fit(coords)
y = kmeans.labels_

df['cluster'] = kmeans.predict(df[['Longitude','Latitude']])
df.head()
df['Rating'].fillna(0, inplace=True)

from scipy.spatial import cKDTree

def find_same_cluster(df, Latitude, Longitude, count=20):
    # Convert input data to DataFrame with feature names
    input_data = pd.DataFrame([[Latitude, Longitude]], columns=['Latitude', 'Longitude'])

    # Create a cKDTree object for fast nearest neighbor search
    tree = cKDTree(df[['Latitude', 'Longitude']])

    # Find the nearest neighbor to the input location
    _, idx = tree.query(input_data, k=1)

    # Get the cluster of the nearest neighbor
    cluster = df.iloc[idx[0]]['cluster']

    # Filter the rows in the dataframe that belong to the same cluster
    same_cluster_data = df[df['cluster'] == cluster]

    # Sort the restaurants by rating
    top_restaurants = same_cluster_data.sort_values(by=['Rating'], ascending=False)

    # Get the top 'count' restaurants
    top_restaurants = top_restaurants.head(count)

    return top_restaurants

top_3_places_in_nagpur = [21.154327,79.105853]

result = find_same_cluster(df,top_3_places_in_nagpur[0],top_3_places_in_nagpur[1],count=10)

import requests

def get_coordinates_from_address(address):
    # Base URL for Nominatim API
    base_url = 'https://nominatim.openstreetmap.org/search'

    # Parameters for the API request
    params = {
        'q': address,
        'format': 'json',
        'limit': 1  # Number of results to return
    }

    # Sending the GET request to Nominatim API
    response = requests.get(base_url, params=params)

    # Check if the request was successful
    if response.status_code == 200:
        # Parse the response JSON and extract coordinates
        data = response.json()
        latitude = data[0]['lat']
        longitude = data[0]['lon']
        return latitude, longitude
    else:
        return None

# address_to_convert = "Sitabuldi, Nagpur"
# coordinates = get_coordinates_from_address(address_to_convert)
# if coordinates:
#     print(f"Coordinates for '{address_to_convert}' are: {coordinates}")
# else:
#     print("Could not get the coordinates.")

# top_places_in_nagpur = get_coordinates_from_address("Dharampeth,Nagpur")

# result = find_same_cluster(df,top_places_in_nagpur[0],top_places_in_nagpur[1],count=10)
# rest=result[['Restaurant Name','Rating','Address','Area','Veg',]]

# tuple_list = list(rest.itertuples(index=False,name=None))
# print(tuple_list)

from google.colab.output import eval_js
print(eval_js("google.colab.kernel.proxyPort(5000)"))

from os import name
# from flask_ngrok import run_with_ngrok
from flask import Flask,render_template,url_for,request

#Running flask app
app = Flask(__name__,template_folder="/content/drive/MyDrive/Colab Notebooks/flask/templates",static_folder="/content/drive/MyDrive/Colab Notebooks/flask/static")

#---------------------------------------
top_places_in_nagpur = get_coordinates_from_address(name)

result = find_same_cluster(df,top_places_in_nagpur[0],top_places_in_nagpur[1],count=10)
rest=result[['Restaurant Name','Rating','Address','Area','Veg',]]


# run_with_ngrok(app)
headings= ('Restaurant Name','Rating','Address','Area','Veg')
data = list(rest.itertuples(index=False,name=None))
@app.route("/")
def home():
  if request.method=='GET':
    print("poste!")
    name = request.form.get('input')

  else:
    print("get !")
    name = request.form['input']
  return render_template("index.html",headings=headings,data=data)+ name
